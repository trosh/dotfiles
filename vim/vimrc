" load plugins the CoolÂ© way
execute pathogen#infect()

" Show line numbers
set number
set showcmd
" Always display the status line, even if only one window is displayed
set laststatus=2

" Show whitespace
set listchars=tab:>-,trail:@,nbsp:~
set list
set cursorline
set hlsearch
" horizontal menu for cli autocompletion
set wildmenu
" user friendly search
set incsearch

filetype plugin on

syntax enable
au BufNewFile,BufRead CMakeLists*.txt set filetype=cmake
set tabstop=8
set shiftwidth=8
set smarttab
set noexpandtab
filetype indent on
set autoindent
set smartindent
"set cino=(0
runtime ftplugin/man.vim
set keywordprg=:Man

" Map key to toggle opt
function MapToggle(key, opt)
  let cmd = ':set '.a:opt.'! \| set '.a:opt."?\<CR>"
  exec 'nnoremap '.a:key.' '.cmd
  exec 'inoremap '.a:key." \<C-O>".cmd
endfunction
command -nargs=+ MapToggle call MapToggle(<f-args>)

" Display-altering option toggles
MapToggle <F1> hlsearch
MapToggle <F2> wrap
MapToggle <F3> list

" Behavior-altering option toggles
MapToggle <F10> scrollbind
MapToggle <F11> ignorecase
MapToggle <F12> paste
"set pastetoggle=<F12>

if $TERM == "xterm-color"
	set t_Co=256
endif
"let g:gruvbox_contrast_dark = "hard"
set background=dark
if &t_Co >= 256 || has("gui_running")
	colorscheme distinguished
else
	colorscheme slate
endif

" Enable use of the mouse for all modes
" vital if you live in the 21st century
set mouse=a
if has("mouse_sgr")
	set ttymouse=sgr " Faster mouse in tty, xterm patch version >= 277
elseif has("mouse_xterm")
	set ttymouse=xterm2 " Faster mouse in tty, xterm patch version from 95 to 276
endif
if executable("fbterm")
	set ttymouse=xterm " Reset to xterm in order to use GPM mouse
endif

set tags=./tags;,tags;
"set cscopequickfix=s-,c-,d-,i-,t-,e-
"if has("cscope")
"	set csprg=/usr/bin/cscope
"	set csto=1
"	set cst
"	set csverb
"	set cspc=3
"	"add any database in current dir
"	if filereadable("cscope.out")
"		cs add cscope.out
"	"else search cscope.out elsewhere
"	else
"	let cscope_file=findfile("cscope.out", ".;")
"		"echo cscope_file
"		if !empty(cscope_file) && filereadable(cscope_file)
"			exe "cs add" cscope_file
"		endif
"	endif
"	function! Csc()
"		cscope find c <cword>
"		copen
"	endfunction
"	command! Csc call Csc()
"endif

" CtrlP stuff
let g:ctrlp_map = '<c-p>'
let g:ctrlp_cmd = 'CtrlP'
let g:ctrlp_working_path_mode = 'ra'
"noremap <c-b> :CtrlP $BXI_SRC_DIR/*
noremap <c-t> :FZF<CR>

" Syntastic stuff
"set statusline+=%#warningmsg#
"set statusline+=%{SyntasticStatuslineFlag()}
"set statusline+=%*

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 0
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0
let g:syntastic_tex_checkers = ['chktex']

nmap <F4> :call SVED_Sync()<CR>
noremap <F8> :lopen<cr>
noremap <F9> :lclose<cr>

"map <C-K> :pyf /usr/share/clang/clang-format.py<cr>
"imap <C-K> <c-o>:pyf /usr/share/clang/clang-format.py<cr>
source /usr/share/doc/fzf/examples/fzf.vim
